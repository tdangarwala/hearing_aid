#include "daisy_seed.h"
#include "daisysp.h"

#include "arm_math.h"

using namespace daisy;
using namespace daisysp;

constexpr int SAMPLE_BUFFER_SIZE = 256;
//why 1024? power of 2 requirement for fft, frequency resolution
//buffer size is a good mix between memory and freq resolution
constexpr int NUM_BANDS = 6;
constexpr int FIR_TAP_COUNT = 127; // Number of taps in the FIR filter

DaisySeed hw;

//bool led_state = true;

float window[SAMPLE_BUFFER_SIZE];
float windowed_data[SAMPLE_BUFFER_SIZE];

arm_fir_instance_f32 fir_filters[NUM_BANDS];
float fir_states[NUM_BANDS][SAMPLE_BUFFER_SIZE + FIR_TAP_COUNT - 1] = {0.0f};
float band_outputs[NUM_BANDS][SAMPLE_BUFFER_SIZE] = {0.0f}; // Separate buffers for each band

float fir_coeffs[NUM_BANDS][FIR_TAP_COUNT] = {
	{0.00018932,0.00022512,0.00026510,0.00031069,0.00036330,0.00042431,0.00049503,0.00057678,0.00067076,0.00077815,0.00090004,0.00103744,0.00119127,0.00136236,0.00155144,0.00175913,0.00198595,0.00223230,0.00249845,0.00278456,0.00309067,0.00341669,0.00376240,0.00412745,0.00451138,0.00491360,0.00533337,0.00576987,0.00622214,0.00668912,0.00716962,0.00766237,0.00816599,0.00867901,0.00919989,0.00972700,0.01025864,0.01079307,0.01132846,0.01186299,0.01239476,0.01292188,0.01344243,0.01395449,0.01445615,0.01494552,0.01542073,0.01587993,0.01632136,0.01674327,0.01714399,0.01752194,0.01787560,0.01820354,0.01850444,0.01877708,0.01902034,0.01923323,0.01941488,0.01956453,0.01968157,0.01976552,0.01981603,0.01983289,0.01981603,0.01976552,0.01968157,0.01956453,0.01941488,0.01923323,0.01902034,0.01877708,0.01850444,0.01820354,0.01787560,0.01752194,0.01714399,0.01674327,0.01632136,0.01587993,0.01542073,0.01494552,0.01445615,0.01395449,0.01344243,0.01292188,0.01239476,0.01186299,0.01132846,0.01079307,0.01025864,0.00972700,0.00919989,0.00867901,0.00816599,0.00766237,0.00716962,0.00668912,0.00622214,0.00576987,0.00533337,0.00491360,0.00451138,0.00412745,0.00376240,0.00341669,0.00309067,0.00278456,0.00249845,0.00223230,0.00198595,0.00175913,0.00155144,0.00136236,0.00119127,0.00103744,0.00090004,0.00077815,0.00067076,0.00057678,0.00049503,0.00042431,0.00036330,0.00031069,0.00026510,0.00022512,0.00018932},
	{-0.00198384,-0.00200280,-0.00204509,-0.00211020,-0.00219714,-0.00230441,-0.00243006,-0.00257163,-0.00272624,-0.00289058,-0.00306096,-0.00323334,-0.00340337,-0.00356644,-0.00371774,-0.00385230,-0.00396505,-0.00405088,-0.00410473,-0.00412160,-0.00409664,-0.00402521,-0.00390297,-0.00372587,-0.00349027,-0.00319295,-0.00283120,-0.00240282,-0.00190620,-0.00134033,-0.00070484,0.00000000,0.00077323,0.00161323,0.00251766,0.00348354,0.00450722,0.00558439,0.00671013,0.00787894,0.00908477,0.01032107,0.01158086,0.01285674,0.01414102,0.01542570,0.01670263,0.01796351,0.01920000,0.02040378,0.02156664,0.02268053,0.02373766,0.02473056,0.02565215,0.02649580,0.02725540,0.02792542,0.02850095,0.02897776,0.02935232,0.02962187,0.02978440,0.02983872,0.02978440,0.02962187,0.02935232,0.02897776,0.02850095,0.02792542,0.02725540,0.02649580,0.02565215,0.02473056,0.02373766,0.02268053,0.02156664,0.02040378,0.01920000,0.01796351,0.01670263,0.01542570,0.01414102,0.01285674,0.01158086,0.01032107,0.00908477,0.00787894,0.00671013,0.00558439,0.00450722,0.00348354,0.00251766,0.00161323,0.00077323,0.00000000,-0.00070484,-0.00134033,-0.00190620,-0.00240282,-0.00283120,-0.00319295,-0.00349027,-0.00372587,-0.00390297,-0.00402521,-0.00409664,-0.00412160,-0.00410473,-0.00405088,-0.00396505,-0.00385230,-0.00371774,-0.00356644,-0.00340337,-0.00323334,-0.00306096,-0.00289058,-0.00272624,-0.00257163,-0.00243006,-0.00230441,-0.00219714,-0.00211020,-0.00204509,-0.00200280,-0.00198384},
	{0.00111728,0.00114598,0.00117873,0.00121418,0.00124988,0.00128227,0.00130668,0.00131736,0.00130765,0.00127008,0.00119660,0.00107879,0.00090817,0.00067649,0.00037604,-0.00000000,-0.00045722,-0.00099965,-0.00162949,-0.00234677,-0.00314919,-0.00403187,-0.00498726,-0.00600508,-0.00707234,-0.00817338,-0.00929012,-0.01040223,-0.01148746,-0.01252205,-0.01348119,-0.01433945,-0.01507142,-0.01565222,-0.01605812,-0.01626713,-0.01625962,-0.01601883,-0.01553142,-0.01478794,-0.01378322,-0.01251667,-0.01099252,-0.00921996,-0.00721311,-0.00499098,-0.00257727,0.00000000,0.00270881,0.00551372,0.00837641,0.01125640,0.01411175,0.01689984,0.01957817,0.02210521,0.02444115,0.02654876,0.02839407,0.02994709,0.03118238,0.03207963,0.03262400,0.03280646,0.03262400,0.03207963,0.03118238,0.02994709,0.02839407,0.02654876,0.02444115,0.02210521,0.01957817,0.01689984,0.01411175,0.01125640,0.00837641,0.00551372,0.00270881,0.00000000,-0.00257727,-0.00499098,-0.00721311,-0.00921996,-0.01099252,-0.01251667,-0.01378322,-0.01478794,-0.01553142,-0.01601883,-0.01625962,-0.01626713,-0.01605812,-0.01565222,-0.01507142,-0.01433945,-0.01348119,-0.01252205,-0.01148746,-0.01040223,-0.00929012,-0.00817338,-0.00707234,-0.00600508,-0.00498726,-0.00403187,-0.00314919,-0.00234677,-0.00162949,-0.00099965,-0.00045722,-0.00000000,0.00037604,0.00067649,0.00090817,0.00107879,0.00119660,0.00127008,0.00130765,0.00131736,0.00130668,0.00128227,0.00124988,0.00121418,0.00117873,0.00114598,0.00111728},
	{-0.00069445,-0.00063877,-0.00056550,-0.00047578,-0.00037106,-0.00025380,-0.00012807,0.00000000,0.00012217,0.00022834,0.00030735,0.00034810,0.00034112,0.00028032,0.00016471,-0.00000000,-0.00020027,-0.00041423,-0.00061206,-0.00075724,-0.00080887,-0.00072487,-0.00046594,0.00000000,0.00069320,0.00161775,0.00275804,0.00407618,0.00551119,0.00697977,0.00837921,0.00959226,0.01049379,0.01095909,0.01087311,0.01014019,0.00869353,0.00650362,0.00358490,-0.00000000,-0.00413893,-0.00867227,-0.01339841,-0.01808252,-0.02246837,-0.02629241,-0.02929951,-0.03125921,-0.03198148,-0.03133090,-0.02923828,-0.02570860,-0.02082494,-0.01474753,-0.00770819,0.00000000,0.00803700,0.01603355,0.02361104,0.03040261,0.03607387,0.04034206,0.04299253,0.04389121,0.04299253,0.04034206,0.03607387,0.03040261,0.02361104,0.01603355,0.00803700,0.00000000,-0.00770819,-0.01474753,-0.02082494,-0.02570860,-0.02923828,-0.03133090,-0.03198148,-0.03125921,-0.02929951,-0.02629241,-0.02246837,-0.01808252,-0.01339841,-0.00867227,-0.00413893,-0.00000000,0.00358490,0.00650362,0.00869353,0.01014019,0.01087311,0.01095909,0.01049379,0.00959226,0.00837921,0.00697977,0.00551119,0.00407618,0.00275804,0.00161775,0.00069320,0.00000000,-0.00046594,-0.00072487,-0.00080887,-0.00075724,-0.00061206,-0.00041423,-0.00020027,-0.00000000,0.00016471,0.00028032,0.00034112,0.00034810,0.00030735,0.00022834,0.00012217,0.00000000,-0.00012807,-0.00025380,-0.00037106,-0.00047578,-0.00056550,-0.00063877,-0.00069445},
	{0.00068908,0.00056430,0.00032538,-0.00000000,-0.00036435,-0.00070543,-0.00095617,-0.00105928,-0.00098382,-0.00073909,-0.00038010,0.00000000,0.00029196,0.00040331,0.00029355,-0.00000000,-0.00035692,-0.00059598,-0.00052385,0.00000000,0.00100033,0.00234622,0.00375221,0.00482866,0.00517523,0.00449648,0.00270816,-0.00000000,-0.00317103,-0.00616603,-0.00831441,-0.00909366,-0.00828948,-0.00608600,-0.00304996,0.00000000,0.00221503,0.00297404,0.00210525,-0.00000000,-0.00243060,-0.00396574,-0.00341380,0.00000000,0.00630249,0.01460117,0.02314491,0.02963438,0.03173414,0.02767818,0.01682310,-0.00000000,-0.02044832,-0.04099012,-0.05754746,-0.06633610,-0.06472209,-0.05189650,-0.02919992,0.00000000,0.03087506,0.05804224,0.07662163,0.08321956,0.07662163,0.05804224,0.03087506,0.00000000,-0.02919992,-0.05189650,-0.06472209,-0.06633610,-0.05754746,-0.04099012,-0.02044832,-0.00000000,0.01682310,0.02767818,0.03173414,0.02963438,0.02314491,0.01460117,0.00630249,0.00000000,-0.00341380,-0.00396574,-0.00243060,-0.00000000,0.00210525,0.00297404,0.00221503,0.00000000,-0.00304996,-0.00608600,-0.00828948,-0.00909366,-0.00831441,-0.00616603,-0.00317103,-0.00000000,0.00270816,0.00449648,0.00517523,0.00482866,0.00375221,0.00234622,0.00100033,0.00000000,-0.00052385,-0.00059598,-0.00035692,-0.00000000,0.00029355,0.00040331,0.00029196,0.00000000,-0.00038010,-0.00073909,-0.00098382,-0.00105928,-0.00095617,-0.00070543,-0.00036435,-0.00000000,0.00032538,0.00056430,0.00068908},
	{-0.00040349,0.00000000,0.00015689,-0.00000000,-0.00017568,0.00000000,0.00055989,0.00105887,0.00091642,-0.00000000,-0.00111395,-0.00156097,-0.00099643,0.00000000,0.00044533,-0.00000000,-0.00054146,0.00000000,0.00178784,0.00339570,0.00293168,-0.00000000,-0.00349513,-0.00482677,-0.00303039,0.00000000,0.00130580,-0.00000000,-0.00152898,0.00000000,0.00486856,0.00909009,0.00772154,-0.00000000,-0.00893852,-0.01218416,-0.00755964,0.00000000,0.00319375,-0.00000000,-0.00368733,0.00000000,0.01165086,0.02172744,0.01847071,-0.00000000,-0.02155917,-0.02962276,-0.01858214,0.00000000,0.00811164,-0.00000000,-0.00985962,0.00000000,0.03369731,0.06631010,0.06028774,-0.00000000,-0.08557626,-0.13633517,-0.10537271,0.00000000,0.11623832,0.16637387,0.11623832,0.00000000,-0.10537271,-0.13633517,-0.08557626,-0.00000000,0.06028774,0.06631010,0.03369731,0.00000000,-0.00985962,-0.00000000,0.00811164,0.00000000,-0.01858214,-0.02962276,-0.02155917,-0.00000000,0.01847071,0.02172744,0.01165086,0.00000000,-0.00368733,-0.00000000,0.00319375,0.00000000,-0.00755964,-0.01218416,-0.00893852,-0.00000000,0.00772154,0.00909009,0.00486856,0.00000000,-0.00152898,-0.00000000,0.00130580,0.00000000,-0.00303039,-0.00482677,-0.00349513,-0.00000000,0.00293168,0.00339570,0.00178784,0.00000000,-0.00054146,-0.00000000,0.00044533,0.00000000,-0.00099643,-0.00156097,-0.00111395,-0.00000000,0.00091642,0.00105887,0.00055989,0.00000000,-0.00017568,-0.00000000,0.00015689,0.00000000,-0.00040349}
};

void InitCMSISFilters()
{
    for(int i = 0; i < NUM_BANDS; ++i)
    {
        arm_fir_init_f32(&fir_filters[i], FIR_TAP_COUNT, fir_coeffs[i], fir_states[i], SAMPLE_BUFFER_SIZE);
    }
}


void create_hamming_window(float* window, int size) {
    for(int i = 0; i < size; i++){
        window[i] = 0.54f - 0.46f * cosf((2.0f * M_PI * i)/(size-1));
    }
}



void AudioCallback(AudioHandle::InputBuffer in, AudioHandle::OutputBuffer out, size_t size)
{
	//window function 
	for(size_t i = 0; i < size; i++){
		windowed_data[i] = in[0][i] * window[i];
		
	}

	//split signal into subbands
	for(int band = 0; band < NUM_BANDS; band++)
    {
        arm_fir_f32(&fir_filters[band], windowed_data, band_outputs[band], size);
    }


	//perform VAD on each subband to determine which has speech and noise and which has only noise
	//feature extraction


	//if speech NLMS


	//reconstruct the signal
	for(size_t i = 0; i < size; i++){
		float sum = 0.0f;
		for(int band = 0; band < NUM_BANDS; band++)
		{
			sum += band_outputs[band][i];
		}

		out[0][i] = sum;
		out[1][i] = sum;
	}


	// out[0][i] = in[0][i];
	// out[1][i] = in[1][i];
	
}




int main(void)
{


	hw.Init();

	//hw.StartLog(true);

	//hw.PrintLine("Hello World!");

	hw.SetAudioBlockSize(SAMPLE_BUFFER_SIZE); // number of samples handled per callback
	hw.SetAudioSampleRate(SaiHandle::Config::SampleRate::SAI_48KHZ);
	InitCMSISFilters();
	create_hamming_window(window, SAMPLE_BUFFER_SIZE);


	hw.StartAudio(AudioCallback);

	

	while(1) {

	}
}
